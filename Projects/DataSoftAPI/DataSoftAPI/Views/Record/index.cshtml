@using System.Activities.Statements
@using System.ComponentModel.DataAnnotations
@using System.Reflection
@using System.Web.Mvc.Html
@using API
@using Microsoft.Ajax.Utilities
@model IEnumerable<API.Record>

@{
    ViewBag.Title = "Index";
}

<h2>index</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
<table class="table table-bordered table-inverse ">


    <tr>
        <th>

    <tr>
        @*@foreach (var item in Model.GetType().GetProperties().Select(p => p.Name))
        {*@

        @foreach (var fields  in Model.Select(record => record.fields).GetType().GetProperties())
        {


            //PropertyInfo[] properties = typeof(Record).GetProperties();
            //foreach (PropertyInfo property in properties)
            //{
            //    property.SetValue(record, value);
            //}

            //GetCustomAttribute<DisplayAttribute>().GetName()
            //string name1 = item.fields.GetName();
            //Console.WriteLine(name1);
            //string name2= nameof(item.fields);
            //Console.WriteLine(name2);
            //property.GetCustomAttribute<DisplayAttribute>().GetName()
            
            <th>
                @Html.DisplayNameFor(record=> record.fields.GetType().GetEnumName(fields));
            </th>
        }
    </tr>
    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(model => model.GetEnumerator().Current.fields)
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new { id = item.recordid }) |
                @Html.ActionLink("Details", "Details", new { id = item.recordid }) |
                @Html.ActionLink("Delete", "Delete", new { id = item.recordid })
            </td>
        </tr>
    }

</table>

